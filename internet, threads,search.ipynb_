{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"internet, threads,search.ipynb ","provenance":[],"authorship_tag":"ABX9TyP39Pq2h5jnxVrG2R5CypeQ"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"o3cQhO70zxJ2","colab_type":"text"},"source":["# SEARCH"]},{"cell_type":"markdown","metadata":{"id":"uA4DlPXkwBpV","colab_type":"text"},"source":["Basics of **how search works.**\n","\n","a. **Crawling:** The first step is finding out what pages exist on the web. There isn't a central registry of all web pages, so Google must constantly search for new pages and add them to its list of known pages. This process of discovery is called crawling.\n","\n","b. **Indexing:** After a page is discovered, Google tries to understand what the page is about. This process is called indexing. Google analyzes the content of the page, catalogs images and video files embedded on the page, and otherwise tries to understand the page. This information is stored in the Google index, a huge database stored in many, many (many!) computers.\n","\n","c. **Serving (and ranking):** When a user types a query, Google tries to find the most relevant answer from its index based on many factors. Google tries to determine the highest quality answers, and factor in other considerations that will provide the best user experience and most appropriate answer, by considering things such as the user's location, language, and device (desktop or phone). For example, searching for \"bicycle repair shops\" would show different answers to a user in Paris than it would to a user in Hong Kong. Google doesn't accept payment to rank pages higher, and ranking is done programmatically.\n","\n","d. A Web page's **PageRank** depends on a few factors:\n","\n","i. The frequency and location of keywords within the Web page: If the keyword appears only once within the body of a page, it will receive a low score for that keyword.\n","\n","ii. How long the Web page has existed: People create new Web pages every day, and not all of them stick around for long. Google places more value on pages with an established history.\n","\n","iii. The number of other Web pages that link to the page in question: Google looks at how many Web pages link to a particular site to determine its relevance."]},{"cell_type":"markdown","metadata":{"id":"A-bUvFjWzuM4","colab_type":"text"},"source":["# THREADS"]},{"cell_type":"markdown","metadata":{"id":"7Miv3TAqxNKd","colab_type":"text"},"source":["a. **Threads** are used when we want a process to execute on several CPUs at a time (it is a part of a whole process). Multiple threads need to coordinated properly to share I/O, cpu, memory ect. They share the same data, code and files, but they will each be running a different instruction, and use a different stack pointer, program counter, and registers. so the Process controll block is a but more complicated. \n","\n","\n","b. **Beneifits** include paralelization (speed), and specializtion (more important tasks have higher priority.) Multi-threaded processes hide latency and are more efficient since they share an address space \n","\n","c. A **mutex** is like a lock which is used whenever the thread is accessing the data or resources that are shared among different threads. When a thread locks a mutex it has exclusive access to the shared resources. \n","\n","d. **Deadlock** is a situation where a set of processes are blocked because each process is holding a resource and waiting for another resource acquired by some other process. (preventions: deadlock detection, timeout, ordering\n","\n","e. a **semaphore** is a variable or abstract data type used to control access to a common resource by multiple processes in a concurrent system such as a multitasking operating system. A semaphore is simply a variable. This variable is used to solve critical section problems and to achieve process synchronization in the multi processing environment.\n","Semaphores which allow an arbitrary resource count are called counting semaphores, while semaphores which are restricted to the values 0 and 1 (or locked/unlocked, unavailable/available) are called binary semaphores and are used to implement locks.\n","\n","f. **Livelock** occurs when two or more processes continually repeat the same interaction in response to changes in the other processes without doing any useful work. These processes are not in the waiting state, and they are running concurrently. This is different from a deadlock because in a deadlock all processes are in the waiting state.\n","\n","eg. Consider a UNIX system having 100 process slots. Ten programs are running, each of which having to create 12 (sub)processes. After each process has created 9 processes, the 10 original processes and the 90 new processes have exhausted the table. Each of the 10 original processes now sits in an endless loop forking and failing – which is aptly the situation of a deadlock. The probability of this happening is very little but it could happen.\n","\n","g. For thread creation, a **Fork call** with two parameters proc and args, where proc is the procedure the created thread will start executing with the arguments args. When a thread calls a fork, a new thread is created i.e. a new thread data structure is created with its program counter initialized to the first instruction of the proc argument and args arguments are available on its stack. After the end of execution of the child thread, the result is returned to the parent thread for this we need another mechanism. \n","\n","h. a **Join call** which takes thread Id as an argument. When Join is called from parent thread after fork call with child’s thread id as an argument, it blocks the parent until the child completes its execution, the join call also returns the child’s result to the parent thread, at that point all the resources that were allocated to the child is freed and execution of child thread is terminated.\n","\n","i. The portion of the code performed by the thread under the locked state of the mutex is called **critical section.** The critical section contains the code which performs the operations which require only one thread at a time to perform. When the owner thread exits the **critical section** it releases the mutex and other waiting thread can lock it for their exclusive access to shared resources.\n","\n","j. **Starvation** happens when “greedy” threads make shared resources unavailable for long periods. For instance, suppose an object provides a synchronized method that often takes a long time to return. \n","\n","k. a **context switch** is the process of storing the state of a process or thread, so that it can be restored and resume execution at a later point. This allows multiple processes to share a single CPU, and is an essential feature of a multitasking operating system.\n","\n","l. **kernel threads** within OS, while user threads programmed by users above kernel w/ out kernel support"]},{"cell_type":"markdown","metadata":{"id":"7yeqPoo3w0no","colab_type":"text"},"source":["**Some essential resources every process needs are registers, a program counter, and a stack.**\n","\n","In a **switch**, the state of the process currently executing must be saved somehow, so that when it is rescheduled, this state can be restored.\n","\n","The process state includes all the registers that the process may be using, especially the program counter, plus any other operating system specific data that may be necessary. This is usually stored in a data structure called a **process control block (PCB)** or switchframe."]},{"cell_type":"markdown","metadata":{"id":"0NGPmyY-z1c-","colab_type":"text"},"source":["# OOP"]},{"cell_type":"markdown","metadata":{"id":"ETayNH2hwvX4","colab_type":"text"},"source":["**Object-oriented programming (OOP)** refers to a type of computer programming (software design) in which programmers define the data type of a data structure, and also the types of operations (functions) that can be applied to the data structure.\n","In this way, the data structure becomes an object that includes both data and functions. In addition, programmers can create relationships between one object and another. For example, objects can inherit characteristics from other objects."]},{"cell_type":"markdown","metadata":{"id":"ByNbn0MMz4wp","colab_type":"text"},"source":["# INTERNET"]},{"cell_type":"markdown","metadata":{"id":"yRn7eT-Uz3hL","colab_type":"text"},"source":["**DNS**'s purpose is vital, as it helps convert easy-to-understand domain names like \"howstuffworks.com\" into an Internet Protocol (IP) address, such as 70.42.251.42 that computers use to identify each other on the network. ** the DNS server** (which manages a massive database that maps domain names to IP addresses) resolves the domain name to the IP address.  A **router** is a device that communicates between the internet and the devices in your home that connect to the internet. As its name implies, it “routes” traffic between the devices and the internet.\n","\n","DNS's purpose is vital, as it helps convert easy-to-understand domain names like \"howstuffworks.com\" into an Internet Protocol (IP) address, such as 70.42.251.42 that computers use to identify each other on the network.\n","** the DNS server** (which manages a massive database that maps domain names to IP addresses) resolves the domain name to the IP address.\n","A **router** is a device that communicates between the internet and the devices in your home that connect to the internet. As its name implies, it “routes” traffic \n","\n","\n","\n","Network **load-balancing** balances traffic across two or more WAN links without using complex routing protocols \n","\n","(eg. if a user has a single WAN connection to the Internet operating at 1.5Mbit/s and they wish to add a second broadband (cable, DSL, wireless, etc.) connection operating at 2.5Mbit/s. This would provide them with a total of 4Mbit/s of bandwidth when balancing sessions.)\n","\n","**Firewalls **use one or more of three methods to control traffic flowing in and out of the network:\n","\n","Packet filtering \n","\n","\n","- Packets (small chunks of data) are analyzed against a set of filters. Packets that make it through the filters are sent to the requesting system and all others are discarded.\n","Proxy service - Information from the Internet is retrieved by the firewall and then sent to the requesting system and vice versa.\n","Stateful inspection - A newer method that doesn't examine the contents of each packet but instead compares certain key parts of the packet to a database of trusted information. Information traveling from inside the firewall to the outside is monitored for specific defining characteristics, then incoming information is compared to these characteristics. If the comparison yields a reasonable match, the information is allowed through. Otherwise it is discarded."]}]}